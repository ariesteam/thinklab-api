package org.integratedmodelling.thinklab.api.modelling.observation;

import org.integratedmodelling.exceptions.ThinklabException;

/**
 * An IObservationIterator is returned by the observe() operation on a IModel.
 * It must be capable of producing each matching observation for an observation
 * of the model, and it is assumed that if applicable, the best fitting
 * observation will be at the top so that the first call to next() will produce
 * the best way to observe the model. The iterator must also be capable of
 * producing the total number of observation, and must behave in a lazy way so
 * that no observation (except possibly the first) is actually produced until
 * the call to next() is given. In an observation tree, what makes size() return
 * > 1 is multiple matches between unresolved observables and states in the
 * kbox. The iterator in the top observation must give access to the combinatory
 * set of all possible observations.
 * 
 * The resolve() operation in an ObservationList is the trigger of any 
 * model computation in thinklab.
 * 
 * @author Ferdinando
 * 
 */
public interface IObservationList extends Iterable<IObservation> {

	/**
	 * Return the total number of observations that can be built in
	 * the context/kbox for the model.
	 * 
	 * @return
	 */
	public abstract int size();
	
	/**
	 * Return the n-th observation (please be lazy).
	 * 
	 * @param index
	 * @return
	 */
	public abstract IObservation get(int index);
	
	/**
	 * resolve(n) will compute the n-th observation returned by observing a
	 * model, and return a context filled with the states of all observables
	 * modeled. The context and the kbox to use for computation must have been
	 * saved when the list was created by the IModel.observe() command. The
	 * returned context should have the same states as the original, plus any
	 * new states generated by observing this particular incarnation of the
	 * model.
	 *
	 * @param index the index
	 * @return a new context including the states resulting from computing
	 * @throws ThinklabException if errors arise or the index is out of bounds
	 */
	public abstract IContext resolve(int index) throws ThinklabException;

}
